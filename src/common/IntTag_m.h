//
// Generated file, do not edit! Created by opp_msgtool 6.0 from common/IntTag.msg.
//

#ifndef __INET_INTTAG_M_H
#define __INET_INTTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class IntMetaData;
class IntTag;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

#include "inet/common/Units_m.h" // import inet.common.Units


namespace inet {

// cplusplus {{
typedef std::vector<IntMetaData*> IntDataVec;
// }}

/**
 * Class generated from <tt>common/IntTag.msg:19</tt> by opp_msgtool.
 * <pre>
 * class IntMetaData extends cObject
 * {
 *     string hopName; //may
 *     simtime_t ts; // Timestamp
 *     long qLen; // TX Queue Length
 *     long txBytes; // Transmitted Bytes
 *     long b; //Link bandwidth capacity
 *     double averageRtt;
 *     int numOfFlows;
 *     long rxQlen; // RX Queue Length
 * }
 * </pre>
 */
class IntMetaData : public ::omnetpp::cObject
{
  protected:
    ::omnetpp::opp_string hopName;
    ::omnetpp::simtime_t ts = SIMTIME_ZERO;
    long qLen = 0;
    long txBytes = 0;
    long b = 0;
    double averageRtt = 0;
    int numOfFlows = 0;
    long rxQlen = 0;

  private:
    void copy(const IntMetaData& other);

  protected:
    bool operator==(const IntMetaData&) = delete;

  public:
    IntMetaData();
    IntMetaData(const IntMetaData& other);
    virtual ~IntMetaData();
    IntMetaData& operator=(const IntMetaData& other);
    virtual IntMetaData *dup() const override {return new IntMetaData(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getHopName() const;
    virtual void setHopName(const char * hopName);

    virtual ::omnetpp::simtime_t getTs() const;
    virtual void setTs(::omnetpp::simtime_t ts);

    virtual long getQLen() const;
    virtual void setQLen(long qLen);

    virtual long getTxBytes() const;
    virtual void setTxBytes(long txBytes);

    virtual long getB() const;
    virtual void setB(long b);

    virtual double getAverageRtt() const;
    virtual void setAverageRtt(double averageRtt);

    virtual int getNumOfFlows() const;
    virtual void setNumOfFlows(int numOfFlows);

    virtual long getRxQlen() const;
    virtual void setRxQlen(long rxQlen);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IntMetaData& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IntMetaData& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common/IntTag.msg:31</tt> by opp_msgtool.
 * <pre>
 * class IntTag extends TagBase
 * {
 *     long connId;
 *     IntDataVec intData;
 *     simtime_t rtt;
 *     unsigned int cwnd;
 * }
 * </pre>
 */
class IntTag : public ::inet::TagBase
{
  protected:
    long connId = 0;
    IntDataVec intData;
    ::omnetpp::simtime_t rtt = SIMTIME_ZERO;
    unsigned int cwnd = 0;

  private:
    void copy(const IntTag& other);

  protected:
    bool operator==(const IntTag&) = delete;

  public:
    IntTag();
    IntTag(const IntTag& other);
    virtual ~IntTag();
    IntTag& operator=(const IntTag& other);
    virtual IntTag *dup() const override {return new IntTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual long getConnId() const;
    virtual void setConnId(long connId);

    virtual const IntDataVec& getIntData() const;
    virtual IntDataVec& getIntDataForUpdate() { return const_cast<IntDataVec&>(const_cast<IntTag*>(this)->getIntData());}
    virtual void setIntData(const IntDataVec& intData);

    virtual ::omnetpp::simtime_t getRtt() const;
    virtual void setRtt(::omnetpp::simtime_t rtt);

    virtual unsigned int getCwnd() const;
    virtual void setCwnd(unsigned int cwnd);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IntTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IntTag& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::IntDataVec *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::IntDataVec *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::IntDataVec>(); }
template<> inline inet::IntMetaData *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::IntMetaData*>(ptr.get<cObject>()); }
template<> inline inet::IntTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::IntTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_INTTAG_M_H

