//
// Generated file, do not edit! Created by opp_msgtool 6.0 from transportlayer/orbtcp/flavours/OrbtcpFamilyState.msg.
//

#ifndef __INET__TCP_ORBTCPFAMILYSTATE_M_H
#define __INET__TCP_ORBTCPFAMILYSTATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {
namespace tcp {

struct OrbtcpFamilyStateVariables;

}  // namespace tcp
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/transportlayer/tcp/flavours/TcpTahoeRenoFamilyState_m.h" // import inet.transportlayer.tcp.flavours.TcpTahoeRenoFamilyState

// cplusplus {{
    #include "../../../common/IntTag_m.h"
// }}


namespace inet {
namespace tcp {

/**
 * Struct generated from transportlayer/orbtcp/flavours/OrbtcpFamilyState.msg:21 by opp_msgtool.
 */
struct OrbtcpFamilyStateVariables : ::inet::tcp::TcpTahoeRenoFamilyStateVariables
{
    OrbtcpFamilyStateVariables();
    int B = 0;
    ::omnetpp::simtime_t T = 0;
    double txRate = 0;
    double normalisedInflight = 0;
    double normalisedInflightPrev = 0;
    double u = 0;
    double eta = 0.95;
    double queueingDelay = 0;
    uint32_t targetUtil = 0;
    int incStage = 0;
    int maxStage = 500;
    uint32_t prevWnd = 0;
    uint32_t additiveIncrease = 0;
    uint32_t lastUpdateSeq = 0;
    double R = 0;
    int subFlows = 1;
    int sharingFlows = 1;
    double additiveIncreasePercent = 0.05;
    int rttCount = 0;
    uint32_t ssthresh = 0;
    bool ssComplete = false;
    double alpha = 0;
    double useHpccAlpha = false;

  	std::vector<IntMetaData*> L;
  public:
    virtual std::string str() const override;
    virtual std::string detailedInfo() const override;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const OrbtcpFamilyStateVariables& a);
void __doUnpacking(omnetpp::cCommBuffer *b, OrbtcpFamilyStateVariables& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OrbtcpFamilyStateVariables& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OrbtcpFamilyStateVariables& obj) { __doUnpacking(b, obj); }


}  // namespace tcp
}  // namespace inet


namespace omnetpp {

template<> inet::tcp::OrbtcpFamilyStateVariables *fromAnyPtr(any_ptr ptr);

}  // namespace omnetpp

#endif // ifndef __INET__TCP_ORBTCPFAMILYSTATE_M_H

